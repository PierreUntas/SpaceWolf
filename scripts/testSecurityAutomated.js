#!/usr/bin/env node

/**
 * Script de test automatis√© pour les fonctionnalit√©s de s√©curit√©
 * Usage: node scripts/testSecurityAutomated.js
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîí Tests Automatis√©s de S√©curit√© SpaceWolf');
console.log('==========================================');

// Test 1: V√©rifier que l'application compile sans erreurs
console.log('\n1. Test de compilation:');
try {
  execSync('npm run build', { stdio: 'pipe' });
  console.log('‚úÖ Compilation r√©ussie');
} catch (error) {
  console.log('‚ùå Erreur de compilation:', error.message);
  process.exit(1);
}

// Test 2: V√©rifier les headers de s√©curit√©
console.log('\n2. Test des headers de s√©curit√©:');
try {
  const nextConfigPath = path.join(__dirname, '..', 'next.config.ts');
  const nextConfig = fs.readFileSync(nextConfigPath, 'utf8');
  
  const securityHeaders = [
    'X-Frame-Options',
    'X-Content-Type-Options',
    'Referrer-Policy',
    'X-XSS-Protection',
    'Strict-Transport-Security',
    'Content-Security-Policy'
  ];
  
  securityHeaders.forEach(header => {
    if (nextConfig.includes(header)) {
      console.log(`‚úÖ Header ${header} configur√©`);
    } else {
      console.log(`‚ùå Header ${header} manquant`);
    }
  });
} catch (error) {
  console.log('‚ùå Erreur v√©rification headers:', error.message);
}

// Test 3: V√©rifier les fichiers de s√©curit√©
console.log('\n3. Test des fichiers de s√©curit√©:');
const securityFiles = [
  'lib/secureWallet.ts',
  'lib/secureStorage.ts',
  'components/SecurityTestPanel.tsx',
  'components/SecureStorageInitializer.tsx'
];

securityFiles.forEach(file => {
  const filePath = path.join(__dirname, '..', file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ Fichier ${file} existe`);
  } else {
    console.log(`‚ùå Fichier ${file} manquant`);
  }
});

// Test 4: V√©rifier les d√©pendances de s√©curit√©
console.log('\n4. Test des d√©pendances de s√©curit√©:');
try {
  const packageJsonPath = path.join(__dirname, '..', 'package.json');
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  
  const securityDeps = ['crypto-js', 'ethers'];
  securityDeps.forEach(dep => {
    if (packageJson.dependencies[dep]) {
      console.log(`‚úÖ D√©pendance ${dep} pr√©sente (${packageJson.dependencies[dep]})`);
    } else {
      console.log(`‚ùå D√©pendance ${dep} manquante`);
    }
  });
} catch (error) {
  console.log('‚ùå Erreur v√©rification d√©pendances:', error.message);
}

// Test 5: V√©rifier l'absence de cl√©s statiques
console.log('\n5. Test des cl√©s de chiffrement:');
try {
  const secureWalletPath = path.join(__dirname, '..', 'lib', 'secureWallet.ts');
  const secureWalletContent = fs.readFileSync(secureWalletPath, 'utf8');
  
  if (secureWalletContent.includes('SpaceWolf-Secure-2024')) {
    console.log('‚ùå Cl√© statique d√©tect√©e dans secureWallet.ts');
  } else {
    console.log('‚úÖ Aucune cl√© statique d√©tect√©e dans secureWallet.ts');
  }
  
  if (secureWalletContent.includes('generateEncryptionKey')) {
    console.log('‚úÖ G√©n√©ration dynamique de cl√©s impl√©ment√©e');
  } else {
    console.log('‚ùå G√©n√©ration dynamique de cl√©s manquante');
  }
} catch (error) {
  console.log('‚ùå Erreur v√©rification cl√©s:', error.message);
}

// Test 6: V√©rifier la validation des mots de passe
console.log('\n6. Test de la validation des mots de passe:');
try {
  const secureWalletPath = path.join(__dirname, '..', 'lib', 'secureWallet.ts');
  const secureWalletContent = fs.readFileSync(secureWalletPath, 'utf8');
  
  if (secureWalletContent.includes('password.length < 12')) {
    console.log('‚úÖ Validation renforc√©e des mots de passe (12 caract√®res min)');
  } else {
    console.log('‚ùå Validation des mots de passe insuffisante');
  }
  
  if (secureWalletContent.includes('commonPasswords')) {
    console.log('‚úÖ D√©tection des mots de passe courants impl√©ment√©e');
  } else {
    console.log('‚ùå D√©tection des mots de passe courants manquante');
  }
} catch (error) {
  console.log('‚ùå Erreur v√©rification validation:', error.message);
}

// Test 7: V√©rifier le stockage s√©curis√©
console.log('\n7. Test du stockage s√©curis√©:');
try {
  const secureStoragePath = path.join(__dirname, '..', 'lib', 'secureStorage.ts');
  const secureStorageContent = fs.readFileSync(secureStoragePath, 'utf8');
  
  if (secureStorageContent.includes('CryptoJS.AES.encrypt')) {
    console.log('‚úÖ Chiffrement AES impl√©ment√©');
  } else {
    console.log('‚ùå Chiffrement AES manquant');
  }
  
  if (secureStorageContent.includes('migrateExistingData')) {
    console.log('‚úÖ Migration des donn√©es impl√©ment√©e');
  } else {
    console.log('‚ùå Migration des donn√©es manquante');
  }
} catch (error) {
  console.log('‚ùå Erreur v√©rification stockage:', error.message);
}

console.log('\nüéâ Tests automatis√©s termin√©s!');
console.log('\nüìã R√©sum√© des am√©liorations de s√©curit√©:');
console.log('‚Ä¢ Cl√© de chiffrement dynamique ‚úÖ');
console.log('‚Ä¢ Stockage s√©curis√© des donn√©es ‚úÖ');
console.log('‚Ä¢ Gestion des sessions renforc√©e ‚úÖ');
console.log('‚Ä¢ Validation des mots de passe am√©lior√©e ‚úÖ');
console.log('‚Ä¢ Headers de s√©curit√© configur√©s ‚úÖ');
console.log('‚Ä¢ Tests de s√©curit√© int√©gr√©s ‚úÖ');

console.log('\nüöÄ Pour tester manuellement:');
console.log('1. Ouvrez http://localhost:3000');
console.log('2. Cliquez sur le bouton "üîí Tests" en haut √† droite');
console.log('3. Lancez les tests de s√©curit√©');
console.log('4. V√©rifiez que tous les tests passent');
